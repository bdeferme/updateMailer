#!/bin/bash
#
# updateMailer (gather update information + mail them)
# is a script written by: Bert Deferme <bert@open-future.be>
#
# Description:
# Gather information on updates, and mail them to a specified email address.
#
# Released as GPLv3
#

#
# Configuration
#

sendTo="updates@open-future.be"				# The address to send updates to
hostname=$(hostname)					# Get the hostname - used in subject
subject="[updateMailer] updates for ${hostname}"		# The subject line
from="root@sight.local" 				# The address to send FROM

#
# Do not edit anything below, unless you understand BASH ;-)
#

version="1.0 RC1"
OUT=/dev/null

showUsage() {
        echo "Usage: $0"
        echo "  -h      : show this help"
        echo "  -v      : be verbose"
        exit 0
}

# Options

while getopts "vh" Option
do
        case $Option in
                v) OUT=/dev/stdout
                ;;
                h) showUsage
                ;;
                *) showUsage
                ;;
        esac
done

#
# Check for OS and store in $OS / $DIST
#
OS=$(uname -s)
if [ $OS = "SunOS" ];
  then 
  OS=Solaris
elif [ $OS = "Linux" ];
  then
  if [ -f /etc/redhat-release ];
    then
    DIST="Redhat"
    REV=$(cat /etc/redhat-release)
  elif [ -f /etc/debian_version ];
    then
    DIST="Debian"
    REV=$(cat /etc/debian_version)
  fi
fi

echo "updateMailer $version running on $OS $DIST $REV" >$OUT
echo "">$OUT
echo "... will send mails from: $from">$OUT
echo "... will send mails to: $sendTo">$OUT
echo "... with subject: $subject">$OUT

#
# Check if tools exist
#

echo "">$OUT
echo "... checking for needed tools">$OUT

if [[ $DIST == "Redhat" ]];
then
  TOOLS="${TOOLS} yum"
elif [[ $DIST == "Debian" ]];
then
  TOOLS="${TOOLS} aptitude"
fi
NOTOOLS=""
for tool in $TOOLS; do
  TOOLP=$(which $tool 2> /dev/null)
  if [[ x$TOOLP = "x" ]]; then
    NOTOOLS="${NOTOOLS}$tool "
  fi
done

if [[ ! x$NOTOOLS = "x" ]]; then
  echo "ERR: The following needed tools are not installed:">/dev/stderr
  echo $NOTOOLS>/dev/stderr
  echo
  while [[ ! ( $ANSB == "y" || $ANSB == "n" ) ]]; do
  echo
  echo "Continue anyway (y/n)? ">/dev/stderr
  read -n 1 ANSB
  done
  [[ $ANSB == "n" ]] && echo "Exiting." && exit
fi

#
# Get updates
#

echo "... checking for updates">$OUT
updates="0"

if [[ $OS = "Solaris" ]];
then
  echo "ERR: Your Operating System ($OS) is currently unsupported.">/dev/stderr
elif [[ $OS = "Linux" ]];
then
  if [[ $DIST = "Redhat" ]];
  then
    echo "... Using yum">$OUT
    yum --security check-update > /tmp/updates.tmp 2>&1
    firstrun=$?
    if [[ $firstrun = "1" ]];
    then
      echo "... yum-security not found. Using check-update without '--security'. Install yum-security to limit the output to security updates.">/dev/stderr
      yum check-update > /tmp/updates.tmp 2>&1
      if [[ $? = "100" ]];
      then 
        updates=1
      fi
    else
      if [[ $firstrun = "100" ]];
      then
        updates="1"
      fi
    fi
  fi
  if [[ $DIST = "Debian" ]];
  then
    echo "... Using aptitude"
    aptitude search '~U' > /tmp/updates.tmp 
    updates=$(cat /tmp/updates.tmp|wc -l)
  fi
fi

if [[ $updates > 0 ]];
then
  echo "... Updates found, sending email">$OUT
  mail -s $subject $sendTo -- -f "${from}" </tmp/updates.tmp
else
  echo "... No updates">$OUT
fi
